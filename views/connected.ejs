<html>
  <head>
    <title>My Quickbooks Integration with Monday.com</title>
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <style>
      body {
        background-color: #f5f5f5;
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
      }
      .container {
        margin-top: 5%;
        padding: 20px;
      }
      .cards-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 30px;
        margin-top: 20px;
      }

      .card {
        width: 400px;
        height: 100%;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 20px;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
      }

      .card h4 {
        margin-bottom: 10px;
      }

      .card p {
        margin-bottom: 20px;
      }

      .card-footer {
        margin-top: auto;
      }

      .button-card {
        width: 100%;
        padding: 10px;
        border: 1px solid grey;
        cursor: pointer;
        background-color: #00c853;
        border-color: #00c853;
      }
      
      /* Media query for mobile devices */
      @media (max-width: 768px) {
        .cards-container {
          grid-template-columns: 1fr; /* One card per row */
        }
        .card {
          width: 80%; /* Adjust width for better mobile layout */
          margin: 10px auto; /* Add margin for better spacing */
        }
      }
      @media (max-width: 768px) {
        .card {
          width: 80%;
          margin-bottom: 20px;
        }
      }
    </style>
    <script>
      
      function refreshCall() {
        $("#result").html("Loading...");
        $.get("/api_call/refresh", function (data) {
          $("#result").html(JSON.stringify(data, null, 2));
        });
      }

      var invoiceData = [];
      var custData = [];
      var custDetails=[];
      async function customerCall(customerRefValue) {
        try {
          // Make a GET request to the new route on your server to get customer data
          const data = await $.get("/api_call/customer", {
            customerRefValue: customerRefValue,
          });

          // Save the data to the custData variable (global variable)
          custData = data;
        } catch (error) {}
      }
      async function invoiceCall(docNum) {
        try {
          // Make a GET request to the new route on your server to get invoice data
          const data = await $.get("/api_call/invoice", { docNum: docNum });

          // Save the data to the invoiceData variable
          invoiceData = data.QueryResponse.Invoice[0];

          // Call the customerCall function here to use the invoiceData
          await customerCall(invoiceData.CustomerRef.value);
        } catch (error) {}
      }
      async function customerDetails(custName){
        try{
          const data = await $.get("/api_call/customerInfo", {custName:custName});
          console.log("\n\n Customer info  : ", data.QueryResponse.Customer[0]);
          custDetails = data.QueryResponse.Customer[0];
        }catch(err){
          console.log("customerError " , err);
        }
      }
      let boardData = [],
        no_of_items = 0;
      async function getBoardData() {
        $("#result").html("Working...");
        // Make a GET request to the new route on your server to get board data
        try {
          // Make a GET request to the new route on your server to get board data
          const data = await fetch("api_call/get_board_data");
          const jsonData = await data.json();

          // Extract the boardId and boardData from the response
          const { boardId, boardData: receivedBoardData } = jsonData;

          boardData = receivedBoardData;

          let i = 0;
          let board_id = boardData.boardId;
          boardData = boardData.boardData;
          no_of_items = boardData.length;
          console.log(boardData);

          while (no_of_items > 0) {
            const docNum = boardData[i].name;

            await invoiceCall(docNum);
            console.log(i + 1);
            invoiceData = JSON.stringify(invoiceData, null, 2);
            custData = JSON.stringify(custData, null, 2);
            invoiceData = JSON.parse(invoiceData);
            custData = JSON.parse(custData);

            itemId = boardData[i].id;
            col0_id = boardData[i].column_values[0].id;
            col1_id = boardData[i].column_values[1].id;
            col2_id = boardData[i].column_values[2].id;
            col3_id = boardData[i].column_values[3].id;
            col4_id = boardData[i].column_values[4].id;
            col5_id = boardData[i].column_values[5].id;
            col6_id = boardData[i].column_values[6].id;
            col7_id = boardData[i].column_values[7].id;
            col8_id = boardData[i].column_values[8].id;
            col9_id = boardData[i].column_values[9].id;

            col0_val = custData.Customer.DisplayName;
            col1_val = invoiceData.DueDate.substr(0, 10);
            col2_val = invoiceData.Balance;
            col3_val = invoiceData.SalesTermRef
              ? invoiceData.SalesTermRef.name
              : "NIL";

            col4_val = custData.Customer.PrimaryEmailAddr.Address;
            col5_val =
              invoiceData.BillAddr.Line1 +
              "  " +
              invoiceData.BillAddr.City +
              "  " +
              invoiceData.BillAddr.Country;
            col6_val = invoiceData.Line[1].Amount;
            col7_val = invoiceData.TxnTaxDetail.TotalTax;
            col8_val = invoiceData.MetaData.CreateTime.substr(0, 10);
            col9_val = invoiceData.MetaData.LastUpdatedTime.substr(0, 10);

            const postData = {
              boardId: board_id,
              itemId: itemId,
              columns: [
                { id: col0_id, value: col0_val },
                { id: col1_id, value: col1_val },
                { id: col2_id, value: col2_val },
                { id: col3_id, value: col3_val },
                { id: col4_id, value: col4_val },
                { id: col5_id, value: col5_val },
                { id: col6_id, value: col6_val },
                { id: col7_id, value: col7_val },
                { id: col8_id, value: col8_val },
                { id: col9_id, value: col9_val },
              ],
            };
            try {
              const response = await fetch("/api_call/updateCol", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(postData),
              });

              if (response.ok) {
                const responseData = await response.json();
                console.log("Response from server:", responseData);
              } else {
                console.error("Error from server:", response.statusText);
              }
            } catch (error) {
              console.error("Error while getting invoice data:", error);
            }
            no_of_items--;
            i++;
          }
          $("#result").html("Board Data updated Successfully");
        } catch (error) {
          console.error("Error while getting board data:", error);
          $("#boardDataResult").html("Error: " + JSON.stringify(error));
        }
      }
    
      async function getCustomerData() {
        $("#result").html("Working...");
        // Make a GET request to the new route on your server to get board data
        try {
          // Make a GET request to the new route on your server to get board data
          const data = await fetch("api_call/get_cust_board_data");
          const jsonData = await data.json();

          // Extract the boardId and boardData from the response
          const { boardId, boardData: receivedBoardData } = jsonData;

          boardData = receivedBoardData;

          let i = 0;
          let board_id = boardData.boardId;
          boardData = boardData.boardData;
          no_of_items = boardData.length;
          console.log("\n \n boardData : ", boardData);

          while (no_of_items > 0) {
            const custName = boardData[i].name;

            await customerDetails(custName);


            //---------------------------------------------------------------------------------
            console.log(i + 1);
            custDetails = JSON.stringify(custDetails, null, 2);
            custDetails = JSON.parse(custDetails);

            console.log("\n\ncustomer details  :", custDetails)
            itemId = boardData[i].id;
            col0_id = boardData[i].column_values[0].id;
            col1_id = boardData[i].column_values[1].id;
            col2_id = boardData[i].column_values[2].id;
            col3_id = boardData[i].column_values[3].id;
            col4_id = boardData[i].column_values[4].id;
            col5_id = boardData[i].column_values[5].id;
            col6_id = boardData[i].column_values[6].id;
            col7_id = boardData[i].column_values[7].id;
            
            col0_val = custDetails.Taxable;
            col1_val = custDetails.Balance;
            col2_val = custDetails.CurrencyRef.value;
            col3_val = custDetails.CompanyName;
            col4_val = custDetails.PrimaryEmailAddr.Address;
            col5_val =
              custDetails.BillAddr.Line1 +
              "  " +
              custDetails.BillAddr.City +
              "  " +
              custDetails.BillAddr.Country;
            col6_val = custDetails.MetaData.CreateTime.substr(0, 10);
            col7_val = custDetails.MetaData.LastUpdatedTime.substr(0, 10);

            const postData = {
              boardId: board_id,
              itemId: itemId,
              columns: [
                { id: col0_id, value: col0_val },
                { id: col1_id, value: col1_val },
                { id: col2_id, value: col2_val },
                { id: col3_id, value: col3_val },
                { id: col4_id, value: col4_val },
                { id: col5_id, value: col5_val },
                { id: col6_id, value: col6_val },
                { id: col7_id, value: col7_val },
              ],
            };
            try {
              const response = await fetch("/api_call/updateCol", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify(postData),
              });

              if (response.ok) {
                const responseData = await response.json();
                console.log("Response from server:", responseData);
              } else {
                console.error("Error from server:", response.statusText);
              }
            } catch (error) {
              console.error("Error while getting invoice data:", error);
            }
            no_of_items--;
            i++;
          }
          $("#result").html("Board Data updated Successfully");
        } catch (error) {
          console.error("Error while getting board data:", error);
          $("#boardDataResult").html("Error: " + JSON.stringify(error));
        }
      }
   
    </script>
  </head>
  <script>
    if (window.opener) {
        window.opener.location.href = "/connected#";
        window.close();
    }
    function createInvoice() {
     var path = "/create_invoice"; // Replace with the actual path for creating invoices
     var newTab = window.open(path, '_blank');
    }
  </script>
  <body>
    <div class="container">
      <center><h3>Connected!</h3></center>
      <br></br>
      <div class="cards-container">
        <div class="card">
          <center>
          <h4>Show Invoices Details</h4>
          <p>Click the button below to fetch data from your QuickBooks and display it in Monday.com's table.</p>
        </center>
          <button class="btn btn-primary button-card" onclick="getBoardData()">
             Show Invoices Details
          </button>
        </div>
        <div class="card">
          <center><h4>Create Invoice</h4>
          <p>Click the button below to create a new invoice.</p></center>
          <button class="btn btn-primary button-card" onclick="createInvoice()">
            Create Invoice
          </button>
        </div>
        <div class="card">
          <center><h4>Show Customers Details</h4>
          <p>Click the button below to show the customers details.</p></center>
          <button class="btn btn-primary button-card" onclick="getCustomerData()">
            Customer Details
          </button>
        </div>
        <div class="card">
          <center><h4>Refresh Token</h4>
          <p>Click the button below to refresh the authentication token.</p></center>
          <button class="btn btn-primary button-card" onclick="refreshCall()">
            Refresh Token Call
          </button>
        </div>
        
      </div>
      <br><br>
      <div><code id="result"></code></div>
    </div>
  </body>
</html>
